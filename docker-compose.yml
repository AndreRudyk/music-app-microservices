services:
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEBUG=1
    volumes:
        - ./localstack:/var/lib/localstack
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4566/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  resource-db:
    image: postgres:17-alpine3.20
    environment:
      POSTGRES_DB: ${POSTGRES_DB_RESOURCE}
      POSTGRES_USER: ${POSTGRES_USER_RESOURCE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_RESOURCE}
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_RESOURCE} -d ${POSTGRES_DB_RESOURCE} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  song-db:
    image: postgres:17-alpine3.20
    environment:
      POSTGRES_DB: ${POSTGRES_DB_SONG}
      POSTGRES_USER: ${POSTGRES_USER_SONG}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SONG}
    ports:
      - "5433:5432"
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d

  service-registry:
    build:
      context: .
      dockerfile: ./eureka-service-registry/Dockerfile
    ports:
      - "8761:8761"
    environment:
      - EUREKA_HOST=service-registry

  resource-service:
    build:
      context: .
      dockerfile: ./resource-service/Dockerfile-resource
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
      AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/resource-service/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq:
        condition: service_started
      resource-db:
        condition: service_healthy
      service-registry:
        condition: service_started
      localstack:
        condition: service_healthy

  song-service:
    build:
      context: .
      dockerfile: ./song-service/Dockerfile-song
#    deploy:
#      replicas: 2
    ports:
      - 8082-8083:8082
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/song-service/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - song-db
      - service-registry

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-processor:
    build:
      context: .
      dockerfile: ./resource-processor/Dockerfile-processor
    ports:
      - "8081:8081"
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    depends_on:
      rabbitmq:
        condition: service_healthy
      service-registry:
        condition: service_started
      song-service:
        condition: service_healthy
      resource-service:
        condition: service_healthy
