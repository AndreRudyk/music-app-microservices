services:
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEBUG=1
    volumes:
        - ./localstack:/var/lib/localstack
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4566/_localstack/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  resource-db:
    image: postgres:17-alpine3.20
    environment:
      POSTGRES_DB: ${POSTGRES_DB_RESOURCE}
      POSTGRES_USER: ${POSTGRES_USER_RESOURCE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_RESOURCE}
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_RESOURCE} -d ${POSTGRES_DB_RESOURCE} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  song-db:
    image: postgres:17-alpine3.20
    environment:
      POSTGRES_DB: ${POSTGRES_DB_SONG}
      POSTGRES_USER: ${POSTGRES_USER_SONG}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SONG}
    ports:
      - "5433:5432"
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d

  service-registry:
    build:
      context: .
      dockerfile: ./eureka-service-registry/Dockerfile
    ports:
      - "8761:8761"
    environment:
      - EUREKA_HOST=service-registry
    labels:
      - "logging=promtail"
      - "logging.jobname=eureka-service-registry"
    networks:
      - default
      - monitoring

  authorization-server:
    build:
      context: .
      dockerfile: ./authorization-server/Dockerfile-authorization
    ports:
      - "9000:9000"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: authorization-server
      SPRING_SECURITY_OAUTH2_AUTHORIZATIONSERVER_ISSUER: http://authorization-server:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - service-registry
    labels:
      - "logging=promtail"
      - "logging.jobname=authorization-server"
    networks:
      - default
      - monitoring

  resource-service:
    build:
      context: .
      dockerfile: ./resource-service/Dockerfile-resource
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
      AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/resource-service/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq:
        condition: service_started
      resource-db:
        condition: service_healthy
      service-registry:
        condition: service_started
      localstack:
        condition: service_healthy
    labels:
      - "logging=promtail"
      - "logging.jobname=resource-service"
    networks:
      - default
      - monitoring

  song-service:
    build:
      context: .
      dockerfile: ./song-service/Dockerfile-song
#    deploy:
#      replicas: 2
    ports:
      - 8082-8083:8082
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: song-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/song-service/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - song-db
      - service-registry
    labels:
      - "logging=promtail"
      - "logging.jobname=song-service"
    networks:
      - default
      - monitoring

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-processor:
    build:
      context: .
      dockerfile: ./resource-processor/Dockerfile-processor
    ports:
      - "8081:8081"
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    depends_on:
      rabbitmq:
        condition: service_healthy
      service-registry:
        condition: service_started
      song-service:
        condition: service_healthy
      resource-service:
        condition: service_healthy
    labels:
      - "logging=promtail"
      - "logging.jobname=resource-processor"
    networks:
      - default
      - monitoring

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile-gateway
    ports:
      - "8090:8090"
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
    depends_on:
      - service-registry
      - song-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "logging=promtail"
      - "logging.jobname=api-gateway"
    networks:
      - default
      - monitoring

  storage-service:
    build:
      context: .
      dockerfile: ./storage-service/Dockerfile-storage
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: ${STORAGE_DB_URL}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://authorization-server:9000
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://authorization-server:9000/oauth2/jwks
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    depends_on:
#      storage-db:
#        condition: service_healthy
      rabbitmq:
        condition: service_started
      service-registry:
        condition: service_started
      authorization-server:
        condition: service_healthy
      localstack:
        condition: service_healthy
    labels:
      - "logging=promtail"
      - "logging.jobname=storage-service"
    networks:
      - default
      - monitoring

  storage-db:
    image: postgres:17-alpine3.20
    environment:
      POSTGRES_DB: ${POSTGRES_DB_STORAGE}
      POSTGRES_USER: ${POSTGRES_USER_STORAGE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_STORAGE}
    ports:
      - "5434:5434"
    volumes:
      - ./init-scripts/storage-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_STORAGE} -d ${POSTGRES_DB_STORAGE} -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
      - default

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
    command: -config.file=/etc/loki/loki-local-config.yaml
    networks:
      - monitoring
      - default

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monitoring
      - default

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring
      - default

networks:
  monitoring:
    driver: bridge

